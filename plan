variable global:

struct s_shell_data {
    t_list* history,        // check readline library puede no ser necessario gestionar nestra propria historia
    char *  address,
    int     last_execution,
    t_list* env_variables,  // o crear nuestra propria estrutura de variables (empeza con el de la shell)
    int     level,          // algo sobre shells dentro de shells
}


###################
# INTERACTIVIDADE #
###################

a) historial
 mirar las funciones: readline, rl_clear_history, rl_on_new_line, rl_replace_line, rl_redisplay, add_history

    readline:
    La función readline se utiliza en C para leer una línea de entrada del usuario desde la consola.
    La función lee una línea de entrada de la consola y la devuelve como una cadena de caracteres (string).
    La línea de entrada incluye todos los caracteres que el usuario ha ingresado hasta que presiona la tecla "Enter".

    rl_clear_history:
    La función rl_clear_history se utiliza para borrar el historial de líneas de entrada almacenado en la biblioteca readline. El historial de líneas de entrada se utiliza para almacenar las líneas de entrada que ha ingresado el usuario durante la sesión actual. La función rl_clear_history se utiliza para borrar el historial existente antes de que se le solicite al usuario que ingrese otra línea de entrada.

    rl_on_new_line:
    La función rl_on_new_line se utiliza para indicar a la biblioteca readline que se ha completado la entrada de una línea y que se debe imprimir un nuevo indicador de línea de entrada. El indicador de línea de entrada se utiliza para indicar al usuario que está listo para ingresar otra línea de entrada.

    rl_replace_line:
    La función rl_replace_line se utiliza para reemplazar la línea de entrada actual en la biblioteca readline con una nueva línea de entrada. La función se utiliza para editar la línea de entrada actual antes de enviarla a la aplicación que la está utilizando.

    rl_redisplay:
    La función rl_redisplay se utiliza para actualizar la consola con la línea de entrada actual. La función se utiliza para reflejar los cambios realizados en la línea de entrada actual utilizando otras funciones de la biblioteca readline.

    add_history:
    La función add_history se utiliza para agregar una línea de entrada al historial de entradas en la biblioteca readline. El historial de entradas se utiliza para almacenar las líneas de entrada que ha ingresado el usuario durante la sesión actual.

b) prompt
 mirar mas funciones: isatty, ttyname, ttyslot, ioctl, getenv, tcsetattr,
tcgetattr, tgetent, tgetflag, tgetnum, tgetstr,
tgoto, tputs

    isatty:
    La función isatty se utiliza para determinar si un descriptor de archivo corresponde a un terminal. La función devuelve 1 si el descriptor de archivo es un terminal y 0 en caso contrario.

    ttyname:
    La función ttyname se utiliza para obtener el nombre del dispositivo de terminal asociado con un descriptor de archivo. La función devuelve una cadena de caracteres que representa el nombre del dispositivo de terminal o NULL si el descriptor de archivo no está asociado con un terminal.

    ttyslot:
    La función ttyslot se utiliza para obtener el número de la entrada en el archivo /etc/ttys que corresponde a un descriptor de archivo de terminal. La función devuelve el número de entrada en /etc/ttys o -1 si el descriptor de archivo no está asociado con un terminal.

    ioctl:
    La función ioctl se utiliza para enviar comandos específicos a un dispositivo. En el caso de un terminal, se utiliza para configurar y obtener información sobre la terminal.

    getenv: La función getenv se utiliza para obtener el valor de una variable de entorno específica en el sistema operativo. Los valores de las variables de entorno son configurados por el sistema operativo o por programas que se ejecutan en el entorno.

    tcsetattr: La función tcsetattr se utiliza para configurar los atributos de un terminal asociado con un descriptor de archivo.

    tcgetattr: La función tcgetattr se utiliza para obtener los atributos de un terminal asociado con un descriptor de archivo.

    tgetent: La función tgetent se utiliza para obtener información sobre la terminal actual. Esta función se utiliza en conjunto con otras funciones como tgetnum y tgetstr para obtener información específica del terminal, como el número de filas o el color de fondo.

(las siguntes funciones son adiconales que se usan con tgetent para interactuar con la terminal
y obtener info sobre la misma)

    tgetflag: La función tgetflag se utiliza para obtener el valor de una bandera específica de la terminal.

    tgetnum: La función tgetnum se utiliza para obtener el valor de un parámetro numérico específico de la terminal.

    tgetstr: La función tgetstr se utiliza para obtener una cadena de caracteres específica de la terminal.

    tgoto: La función tgoto se utiliza para generar una secuencia de caracteres que representa una secuencia de escape específica de la terminal.

    tputs: La función tputs se utiliza para enviar una secuencia de caracteres a la terminal.

(Estas funciones son útiles para desarrollar programas que interactúan con la terminal de una manera más avanzada y personalizada, permitiendo una mayor personalización y control de la interfaz de usuario.)

c) signales

Si la prompt esta vacia:
Ctrl + C -> abre una nueva prompt
Ctrl + \ -> nada
Ctrl + D -> llama exit

Si prompt tiene texto:
Ctrl + C -> abre una nueva prompt (mantenendo el texto en la anterior) y no se guarda en el historial
Ctrl + \ -> nada
Ctrl + D -> llama exit

Si esta ejecutando un comando:
Ctrl + C
$> ./a.out 1 | ./a.out 2 | ./a.out 3
 -> ./a.out 1 recibe SIGKILL (9)
 -> ./a.out 2 recibe SIGKILL (9)
 -> ./a.out 3 recibe SIGINT (2)

Ctrl + \
$> ./a.out 1 | ./a.out 2 | ./a.out 3
 -> ./a.out 1 recibe SIGKILL (9)
 -> ./a.out 2 recibe SIGKILL (9)
 -> ./a.out 3 recibe SIGQUIT (3)


##############################
#         !TO CHECK !        #
##############################

*hay que ver porque cuando al minishell se le pasa un espacio como imput se rompe
*hay que seguir el comportaimiento que tiene bash con este comando:

                echo " hola este $TESTE entro ' $TESTE este no' $TESTE y si"
                hola este si entro ' si este no' si y si

 el minishell  = [ hola este si entro  $TESTE este no si y si]

##############################
# PROCESSAMENTO DE COMMANDOS #
##############################


input: "< bla < otro |e$HASD xxxxx\"$HASD\"xxxxx'$HASD' < other      \"sddggsdgds $? $BLA $BLA2 dfsd\" > salida 'gfd | sgs $BLA $?' | wc -l >> out >out2 > out3"
envs:
BLA=bla_env
HASD = cho

a) separa en tokens:
"<"
"bla"
"<"
"otro"
"|"
"e$HASD"
"xxxxx\"$HASD\"xxxxx'$HASD'"
"<"
"other"
"\"sddggsdgds $? $BLA $BLA2 dfsd\""
">"
"salida"
"'gfd | sgs $BLA $?'"
"|"
"wc"
"-l"
">>"
"out"
">"
"out2"
">"
"out3"

b) replace `$<a-zA-Z0-9>` por el valor de la variable de entorno
   replace `$?` por el resultado de la ultima ejecucion

"<"
"bla"
"<"
"otro"
"|"
"echo"
"xxxxxchoxxxxx$HASD"
"<"
"other"
"\"sddggsdgds $? $BLA $BLA2 dfsd\""
">"
"salida"
"gfd | sgs $BLA $?"
"|"
"wc"
"-l"
">>"
"out"
">"
"out2"
">"
"out3"

b.2) Los cambios se realizan en los tokens que tiene $<A-Z>, se buscan los que no tienen quotes y los que tienen doble quoutes, los simples no se modifican.


(no es necessario crear realemtne las arrays, es mas conceptual, se puede passar de b) para d) directamente)
c) juntar en comandos [array de tokens] (poner todo lo que esta entre |)
 1: ["<", "bla", "<", "otro"]
 2: ["echo", "xxxxxchoxxxxx$HASD", "<", "other", "sddggsdgds 0 bla_env  dfsd", ">", "salida", "gfdsgs $BLA $?"]
 3: ["wc", "-l", ">>", "out", ">", "out2", ">", "out3"]

d) popular la estrutura:


typedef enum e_in_type {
    FILE,
    INPUT,
} t_in_type;

typedef struct s_in_file {
    char *name;      // name of the file, or the string that represents the end of the input
    t_in_type type;
} t_in_file;

typedef enum e_out_type {
    WRITE,
    APPEND,
} t_out_type;

typedef struct s_out_file {
    char * name;
    t_out_type type;
} t_out_file;

typedef struct s_command {
    input_files: t_list *;          // lista de strings que contine los varios files de entrada en orden de aparecimiento
    output_files: t_list *;         // lista de out_files que contiene los files de salida en orden de aparecimiento
    command: char *;                // comando a ser ejecutado
    argument: t_list *;             // array de strings que contiene los argumentos
} t_command;

por ejemplo para el primero comando:
1: {
    input_files: ["bla", "otro"],
    output_files: [],
    command: NULL, // distinto de "" para como se ejecuta,
    argument: [],
}

2: {
    input_files: ["other"],
    output_files: [{ name: "salida", type: WRITE }],
    command: "echo",
    argumentos: ["xxxxxchoxxxxx$HASD", "sddggsdgds 0 bla_env  dfsd", "gfdsgs $BLA $?"]
}

3: {
    input_files: [],
    output_files: [{ name: "out", type: APPEND }, { name: "out2", type: WRITE }, { name: "out3", type: WRITE }],
    command: "wc",
    arguments: ["-l"]
}

#####################
#   REDIRECCIONES   #
#####################

* comando > archivo: Redirige la salida estándar del comando al archivo, sobrescribiendo * cualquier contenido existente en el archivo.
* comando >> archivo: Redirige la salida estándar del comando al archivo, anexando la salida al final del archivo en lugar de sobrescribir el archivo.
* comando < archivo: Redirige la entrada estándar del comando al archivo, por lo que el comando lee su entrada del archivo en lugar de la terminal.
* comando 2> archivo: Redirige el error estándar del comando al archivo, sobrescribiendo cualquier contenido existente en el archivo

#####################
# EJECUTAR COMANDOS #
#####################


al llamar el exec_command:

void exec_all_comms(t_command *commands)
    // ejecutar builtin (exit, cd, export, unset) en la thread pincipal (si es solo un comando)
    if (commands.size() == 1 && comands[0].command is builtin)
            // ejectuar en la thread principal
    else
        for c in commands:
            exec_command(c)



void exec_command(t_command comando) {
    int child = fork()
    int pipe_fds[2];
    
    pipe(pipe_fds);

    if (child == 0) {
        // estoy en el fork
        // abrir input_files con open para tener el fd del ultimo; 
        // abrir output_files con open para tener el fd del ultimo;
        // mappear input files to stdin y output files to stdout
        // buscar donde esta el comando (si esta "wc" tenemos que ejecutar "/usr/bin/wc")
        // executar realmenete el comando
    }
    else {
        // esperar por el hijo;
    }
}


####################
# BUILTIN COMMANDS #
####################
exit, cd, export, unset, env, pwd, echo

t_command *new_command() {
    t_command res = malloc(sizeof(t_comand));

    res.inputs = NULL;
    res.outpus = NULL;
    res.args = NULL;

    return res;
}

void add_input_file(t_command *command, char *filename) {
    ft_lstadd_back(command->inputs, ft_lstnew(filename));
}

void add_out_file(t_command *command, char *filename, bool is_append) {

    t_out_file *file = malloc(t_out_file);
    if (is_append)
    {
        file->type = APPEND
    } else {
        ...
    }
    file->name = filename;
    ft_lstadd_back(command->outputs, ft_lstnew(file));
}



process()
{

token_list = ["aaa", ">", "out", "argument"];

while (token_list->content) {
    char *current = token_list->content;
    if (current == "<") // strcmp {
        add_out_file(command, token_list->next->content, false);
        token_list = token_list->next;
    } else if (<<) {

    } else if (>) {

    } else if (>>) {

    } else {
        add to args
    }
}

}


#################
# DOCUMENTATION #
#################

Writing your own shell: https://www.cs.purdue.edu/homes/grr/SystemsProgrammingBook/Book/Chapter5-WritingYourOwnShell.pdf

Code simple shell: https://medium.com/swlh/tutorial-to-code-a-simple-shell-in-c-9405b2d3533e

let's built a linux shell: https://blog.devgenius.io/lets-build-a-linux-shell-part-i-954c95911501



https://man7.org/linux/man-pages/man2/signal.2.html
https://man7.org/linux/man-pages/man7/signal.7.html